(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{131:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),b=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=b(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=b(n),m=r,f=d["".concat(o,".").concat(m)]||d[m]||s[m]||i;return n?a.a.createElement(f,c(c({ref:t},p),{},{components:n})):a.a.createElement(f,c({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var p=2;p<i;p++)o[p]=n[p];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},92:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(3),a=n(8),i=(n(0),n(131)),o={sidebar_position:6},c={unversionedId:"adapter-config-tool/defs",id:"adapter-config-tool/defs",isDocsHomePage:!1,title:"Terminology and Definitions",description:"| Term                                     | Description                                              |",source:"@site/docs/adapter-config-tool/defs.md",sourceDirName:"adapter-config-tool",slug:"/adapter-config-tool/defs",permalink:"/openfmb.docs/docs/adapter-config-tool/defs",editUrl:"https://github.com/openenergysolutions/openfmb.docs/edit/develop/website/docs/adapter-config-tool/defs.md",version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/openfmb.docs/docs/adapter-config-tool/quick-guide"},next:{title:"Referenced Setup",permalink:"/openfmb.docs/docs/adapter-config-tool/reference"}},l=[],p={toc:l};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",{parentName:"tr",align:null},Object(i.b)("strong",{parentName:"th"},"Term")),Object(i.b)("th",{parentName:"tr",align:"left"},Object(i.b)("strong",{parentName:"th"},"Description")))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Adapter Configuration file"),Object(i.b)("td",{parentName:"tr",align:"left"},"Main Adapter configuration YAML file")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Template file"),Object(i.b)("td",{parentName:"tr",align:"left"},"Profile mapping files for specific device speaking a specific legacy protocol. A session file can also be used as template file.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"command-id"),Object(i.b)("td",{parentName:"tr",align:"left"},"Name associated with a command in OpenFMB control profile. For example, a command-id for a trip  command can be \u201cmy-trip-command.\u201d With  the command-order settings, command-id can be used to set priority of which command should execute first")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"command-order"),Object(i.b)("td",{parentName:"tr",align:"left"},"Order of  commands by operation id. First == highest priority, last == lower priority")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Poll Policy"),Object(i.b)("td",{parentName:"tr",align:"left"},"Applicable  for ",Object(i.b)("strong",{parentName:"td"},"DNP3 master only.")," Poll policy defines how the DNP3 master will poll an  outstation device. Event, reading, and  status profiles required reference to \u201cpoll-name\u201d that defined in poll policy  settings")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"Heartbeat"),Object(i.b)("td",{parentName:"tr",align:"left"},"Applicable  for ",Object(i.b)("strong",{parentName:"td"},"MODBUS master only"),".   Currently, heartbeat is configured to read a holding register, flip  the masked bit, and write it back")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"DNP3 Specific Settings:  source-type"),Object(i.b)("td",{parentName:"tr",align:"left"},"none,  binary,  analog,  counter     when a field  type (enum-field-type, bool-field-type, etc) is specified as ",Object(i.b)("inlineCode",{parentName:"td"},"mapped"),", but when source-type is specified as ",Object(i.b)("inlineCode",{parentName:"td"},"none"),", the whole field type settings will be  ignored.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"DNP3 Specific Settings:  Group and variation"),Object(i.b)("td",{parentName:"tr",align:"left"},"g12v1 = group  12 variation 1;  g41v1 = group  41 variation 1;  g41v2 = group  41 variation 2;  g41v3 = group  41 variation 3;  g41v4 = group  41 variation 4;")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"DNP3 Specific Settings:  CROB operation type"),Object(i.b)("td",{parentName:"tr",align:"left"},"NUL,  LATCH_OFF,  LATCH_ON,  PULSE_OFF,  PULSE_ON")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"DNP3 Specific Settings:  Trip Close Code"),Object(i.b)("td",{parentName:"tr",align:"left"},"NUL,  TRIP,  CLOSE")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"MODBUS Specific Settings:  source-type"),Object(i.b)("td",{parentName:"tr",align:"left"},"none,  coil,  discrete_input,  input_register,  holding_register     when a field  type (enum-field-type, bool-field-type, etc) is specified as ",Object(i.b)("inlineCode",{parentName:"td"},"mapped"),", but when source-type is specified as ",Object(i.b)("inlineCode",{parentName:"td"},"none"),", the whole field type settings will be  ignored.")),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",{parentName:"tr",align:null},"MODBUS Specific Settings:  mask"),Object(i.b)("td",{parentName:"tr",align:"left"},"Data type of  a mask is now ",Object(i.b)("strong",{parentName:"td"},"INTEGER.")," In a previous version, mask was HEX string.")))))}b.isMDXComponent=!0}}]);