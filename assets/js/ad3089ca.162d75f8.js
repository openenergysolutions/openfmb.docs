"use strict";(self.webpackChunkopenfmb_docs=self.webpackChunkopenfmb_docs||[]).push([[9858],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>b});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,b=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return a?n.createElement(b,o(o({ref:t},d),{},{components:a})):n.createElement(b,o({ref:t},d))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},1975:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={},o="Historian Plugin",l={unversionedId:"adapter/other-plugins/historian",id:"adapter/other-plugins/historian",title:"Historian Plugin",description:"The historian plug-in enables the user to write data to timescale database and query data later on for analysis purposes.",source:"@site/docs/adapter/other-plugins/historian.md",sourceDirName:"adapter/other-plugins",slug:"/adapter/other-plugins/historian",permalink:"/docs/adapter/other-plugins/historian",draft:!1,editUrl:"https://github.com/openenergysolutions/openfmb.docs/edit/develop/website/docs/adapter/other-plugins/historian.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Capture and Replay Plugins",permalink:"/docs/adapter/other-plugins/capture-replay"},next:{title:"Log Plugin",permalink:"/docs/adapter/other-plugins/log"}},s={},p=[{value:"Setup Database",id:"setup-database",level:2},{value:"Database Schema",id:"database-schema",level:2},{value:"Adapter Configuration",id:"adapter-configuration",level:2}],d={toc:p},m="wrapper";function c(e){let{components:t,...i}=e;return(0,r.kt)(m,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"historian-plugin"},"Historian Plugin"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"historian")," plug-in enables the user to write data to ",(0,r.kt)("a",{parentName:"p",href:"https://www.timescale.com/"},"timescale database")," and query data later on for analysis purposes."),(0,r.kt)("h2",{id:"setup-database"},"Setup Database"),(0,r.kt)("p",null,"TimescaleDB is a time-series SQL database that is used as the data storage for the ",(0,r.kt)("inlineCode",{parentName:"p"},"historian")," plug-in of the OpenFMB Adapter.  To setup the database, assuming that you want to store data on ",(0,r.kt)("inlineCode",{parentName:"p"},"~/local-path-to-store-data")," folder of your computer, do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -d \\\n  --name timescaledb \\\n  -p 5432:5432 \\\n  -e POSTGRES_PASSWORD=password \\\n  -v ~/local-path-to-store-data:/var/lib/postgresql/data \\\n  timescale/timescaledb:latest-pg12-oss\n")),(0,r.kt)("p",null,"The above Docker run command shall stand up an instance of TimescaleDB container name ",(0,r.kt)("inlineCode",{parentName:"p"},"timescaledb"),", listening on port ",(0,r.kt)("inlineCode",{parentName:"p"},"5432"),", and storing data to ",(0,r.kt)("inlineCode",{parentName:"p"},"~/local-path-to-store-data"),".  "),(0,r.kt)("h2",{id:"database-schema"},"Database Schema"),(0,r.kt)("p",null,"To initialize the database with the plug-in schema, download ",(0,r.kt)("inlineCode",{parentName:"p"},"timescaledb.sql")," from this link:"),(0,r.kt)("p",null,(0,r.kt)("a",{target:"_blank",href:a(2370).Z},"timescaledb.sql")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Navigate to where the file is downloaded and copy the file to the ",(0,r.kt)("inlineCode",{parentName:"p"},"timescaledb")," container:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"docker cp timescaledb.sql timescaledb:/var/lib/postgresql/\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Shell into the container and run the script:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"docker exec -it -u postgres  timescaledb  ash\n")),(0,r.kt)("p",{parentName:"li"},"Inside the containter, create a database name ",(0,r.kt)("inlineCode",{parentName:"p"},"openfmb")," and run the ",(0,r.kt)("inlineCode",{parentName:"p"},"timescaledb.sql")," script:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"psql -U postgres\n")),(0,r.kt)("p",{parentName:"li"},"At postgres# prompt, creat database then exit:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"postgres# CREATE DATABASE openfmb;\nCREATE DATABASE\npostgres# exit\n")),(0,r.kt)("p",{parentName:"li"},"Then execute the timescale.sql script to initialize database:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"cd /var/lib/postgresql/\npsql -U postgres -d openfmb -a -f timescaledb.sql\n")))),(0,r.kt)("h2",{id:"adapter-configuration"},"Adapter Configuration"),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"timescaledb")," section of the OpenFMB Adapter main configuration file, update according to your need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"enabled"),": when set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", the ",(0,r.kt)("inlineCode",{parentName:"li"},"timescaledb")," plugin is enabled"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"database-url"),": database connection URL (PostgreSQL connection string)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"store-measurement"),": when set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", basic measurement such as Voltage, Current, Wattage... are stored.  Data extracted from *ReadingProfile"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"table-name"),": the name of the data or measurement table.  Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"data")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"store-raw-message"),": when set to ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", raw OpenFMB messages are stored in either JSON or Protobuf format"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"raw-table-name"),": the name of the raw OpenFMB  table.  Default is ",(0,r.kt)("inlineCode",{parentName:"li"},"raw_table")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"raw-data-format"),": format of the OpenFMB stored in the database. 0 is JSON, 1 is Protobuf.  Default is 0 (JSON)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"max-queued-messages"),": max queued messages to be buffered before discarding the oldest messages"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"connect-retry-seconds"),": time (in seconds) to wait between two connection attempts"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data-store-interval-seconds"),": how frequent to store.  ",(0,r.kt)("inlineCode",{parentName:"li"},"0")," means store everything")),(0,r.kt)("p",null,"Here's an example of a configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"timescaledb:\n    enabled: true\n    database-url: postgresql://postgres:password@localhost:5432/openfmb\n    store-measurement: true\n    table-name: data\n    store-raw-message: false\n    raw-table-name: raw_data\n    raw-data-format: 0\n    max-queued-messages: 100\n    connect-retry-seconds: 5\n    data-store-interval-seconds: 0\n")),(0,r.kt)("p",null,"Next, specify the type of OpenFMB messages you wish to store by subscribing to either NATS or MQTT.  Here is an example of full ",(0,r.kt)("inlineCode",{parentName:"p"},"adapter.yaml")," configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"file:\n  id: openfmb-adapter-main\n  edition: 2.1\n  version: 2.1.0.0\n  plugin: ''\nlogging:\n  logger-name: application\n  console:\n    enabled: false\n  rotating-file:\n    enabled: true\n    path: adapter.log\n    max-size: 1048576\n    max-files: 3\nplugins:\n  nats:\n    enabled: true\n    max-queued-messages: 100\n    connect-url: nats://127.0.0.1:4222\n    connect-retry-seconds: 5\n    security:\n      security-type: none\n      jwt-creds-file: ''\n    publish: []\n    subscribe:\n    - profile: SwitchReadingProfile\n      subject: '*'\n    - profile: SwitchStatusProfile\n      subject: '*'\n    - profile: SolarReadingProfile\n      subject: '*'\n    - profile: SolarStatusProfile\n      subject: '*'\n    # More profiles to store as needed...  \n  timescaledb:\n    enabled: true\n    database-url: postgresql://postgres:password@localhost:5432/openfmb\n    store-measurement: true\n    table-name: data\n    store-raw-message: true\n    raw-table-name: raw_data\n    raw-data-format: 0\n    max-queued-messages: 100\n    connect-retry-seconds: 5\n    data-store-interval-seconds: 0\n")))}c.isMDXComponent=!0},2370:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/files/timescaledb-1e904a9a53674ad444231dbdbd5d83be.sql"}}]);