(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{136:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return m}));var a=t(0),i=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=i.a.createContext({}),s=function(e){var n=i.a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return i.a.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},b=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(t),b=a,m=u["".concat(o,".").concat(b)]||u[b]||d[b]||r;return t?i.a.createElement(m,l(l({ref:n},p),{},{components:t})):i.a.createElement(m,l({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=b;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<r;p++)o[p]=t[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"},70:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return l})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return s}));var a=t(3),i=t(7),r=(t(0),t(136)),o={sidebar_position:5},l={unversionedId:"adapter/config",id:"adapter/config",isDocsHomePage:!1,title:"Configuration",description:"When the adapter application is started, the top level configuration file is",source:"@site/docs/adapter/config.md",sourceDirName:"adapter",slug:"/adapter/config",permalink:"/openfmb.docs/docs/adapter/config",editUrl:"https://github.com/openenergysolutions/openfmb.docs/edit/develop/website/docs/adapter/config.md",version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Schemas",permalink:"/openfmb.docs/docs/adapter/schemas"},next:{title:"NATS",permalink:"/openfmb.docs/docs/adapter/native-plugins/nats"}},c=[{value:"Logging",id:"logging",children:[]},{value:"Plugins",id:"plugins",children:[]},{value:"Templating",id:"templating",children:[]}],p={toc:c};function s(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"When the adapter application is started, the top level configuration file is\nread first. (see ",Object(r.b)("a",{parentName:"p",href:"./cli#running-the-adapter"},"Running the adapter"),")."),Object(r.b)("p",null,"It consists of two main sections:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#logging"},"Logging")," - application-level logging parameters"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#plugins"},"Plugins")," - detailed plugin-specific configuration")),Object(r.b)("h2",{id:"logging"},"Logging"),Object(r.b)("p",null,"The logger name is used for messages not related to a particular plugin. It can\nbe useful to distinguish multiple instances of the adapter running on a machine."),Object(r.b)("p",null,"Console logging can be enabled to print everything to ",Object(r.b)("inlineCode",{parentName:"p"},"stdout"),"."),Object(r.b)("p",null,"Rotating file logging can be used to preserve most recent logs without filling\nthe disk unnecessarily. When the ",Object(r.b)("inlineCode",{parentName:"p"},"max-size")," is reached, the file is closed,\nrenamed and a new file is created to continue logging. Only the last ",Object(r.b)("inlineCode",{parentName:"p"},"max-files"),"\nare kept."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},"logging:\n  logger-name: application\n  console:  # log messages to the console\n    enabled: true\n  rotating-file:  # log messages to rotating files\n    enabled: false\n    path: adapter.log\n    max-size: 1048576  # maximum size of a single file in bytes\n    max-files: 3\n")),Object(r.b)("h2",{id:"plugins"},"Plugins"),Object(r.b)("p",null,"In this section, each plugin can be enabled and configured. For details about\neach plugin configuration parameters, see the appropriate documentation page."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"enabled")," boolean parameter is used to enable/disable a particular plugin."),Object(r.b)("p",null,"Non-OpenFMB plugins (e.g. DNP3), will have extra configuration files for each\ndevice with which it communicates. When another YAML file is needed, the ",Object(r.b)("inlineCode",{parentName:"p"},"path"),"\nparameter points to the file and the ",Object(r.b)("inlineCode",{parentName:"p"},"overrides")," list defines parameters\noverriden by a templating system."),Object(r.b)("h2",{id:"templating"},"Templating"),Object(r.b)("p",null,"It is common to have multiple devices sharing the same protocol configuration\nexcept for a few fields (e.g. the conducting equipment mRID). In order to be\nable to reuse the same configuration file, a simple templating engine is\navailable."),Object(r.b)("p",null,"In the configuration file for a device, it is possible to use the special value\n",Object(r.b)("inlineCode",{parentName:"p"},'"?"'),". In the ",Object(r.b)("inlineCode",{parentName:"p"},"overrides")," parameter of the main configuration file, a path to\nthe ",Object(r.b)("inlineCode",{parentName:"p"},'"?"')," value is specified for each device with the appropriate value to\nreplace."),Object(r.b)("p",null,"Here is an example with a DNP3 configuration. The device configuration contains\nthe following field:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},'# ...\nprofiles:\n  - name: SolarControlProfile\n    # ...\n    mapping:  # profile model starts here\n      solarInverter:\n        conductingEquipment:\n          mRID:\n            string-field-type: primary_uuid\n            value: "?"\n')),Object(r.b)("p",null,"In the top-level configuration, we have the following:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},"# ...\ndnp3-master:\n    enabled: true\n    thread-pool-size: 1  # defaults to std::thread::hardware_concurrency() if <= 0\n    masters:\n        - path: dnp3-master.yml\n          overrides:\n            - key: profiles[0].mapping.solarInverter.conductingEquipment.mRID.value\n              value: 42e2c687-c55c-44a0-a734-9443edb46bfc\n        - path: dnp3-master.yml\n          overrides:\n            - key: profiles[0].mapping.solarInverter.conductingEquipment.mRID.value\n              value: 8ad421eb-b0ad-457b-8813-41ab5e47bc1e\n")),Object(r.b)("p",null,"This configures communication to two DNP3 devices using a single template. One with mRID\n",Object(r.b)("inlineCode",{parentName:"p"},"42e2c687-c55c-44a0-a734-9443edb46bfc"),", the other with mRID\n",Object(r.b)("inlineCode",{parentName:"p"},"8ad421eb-b0ad-457b-8813-41ab5e47bc1e"),", with the exact same mappings and\nconfigurations."),Object(r.b)("p",null,"For configurations with multiple profiles, indexing is used to specify which\nprofile. For example, if a the ",Object(r.b)("inlineCode",{parentName:"p"},"dnp3-master.yml")," has a second profile that is\ntemplated, then it can be accessed like this:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-yaml"},"# ...\ndnp3-master:\n  enabled: true\n  thread-pool-size: 1  # defaults to std::thread::hardware_concurrency() if <= 0\n  masters:\n    - path: dnp3-master.yml\n      overrides:\n        # First profile\n        - key: profiles[0].mapping.solarInverter.conductingEquipment.mRID.value\n          value: 42e2c687-c55c-44a0-a734-9443edb46bfc\n        # Second profile\n        - key: profiles[1].mapping.solarInverter.conductingEquipment.mRID.value\n          value: 8ad421eb-b0ad-457b-8813-41ab5e47bc1e\n")))}s.isMDXComponent=!0}}]);