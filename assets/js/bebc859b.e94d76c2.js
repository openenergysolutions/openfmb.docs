(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{110:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return p})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return b}));var r=t(3),o=t(8),a=(t(0),t(133)),i={sidebar_position:4},p={unversionedId:"hmi/run",id:"hmi/run",isDocsHomePage:!1,title:"Run the HMI",description:"To run the OpenFMB HMI Docker image, we need to pass in two environment variables:",source:"@site/docs/hmi/run.md",sourceDirName:"hmi",slug:"/hmi/run",permalink:"/openfmb.docs/docs/hmi/run",editUrl:"https://github.com/openenergysolutions/openfmb.docs/edit/develop/website/docs/hmi/run.md",version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Setting up the HMI",permalink:"/openfmb.docs/docs/hmi/configuration"},next:{title:"Referenced Setup",permalink:"/openfmb.docs/docs/hmi/sld"}},c=[],l={toc:c};function b(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"To run the OpenFMB HMI Docker image, we need to pass in two environment variables:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"APP_CONF"),": Path to application configuration file (in our case, it is the ",Object(a.b)("inlineCode",{parentName:"p"},"app.toml")," in previous section)")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},Object(a.b)("inlineCode",{parentName:"p"},"APP_DIR_NAME"),": Application directory where docker mounted volumn is specified (",Object(a.b)("inlineCode",{parentName:"p"},"-v")," option in ",Object(a.b)("inlineCode",{parentName:"p"},"docker run")," command).  This directory is where all single-line diagrams that you create later in this tutorial shall be stored."))),Object(a.b)("p",null,"Suppose that you've created the ",Object(a.b)("inlineCode",{parentName:"p"},"app.toml")," file in ",Object(a.b)("inlineCode",{parentName:"p"},"/home/joe/hmi")," directory, and you want to mount and point ",Object(a.b)("inlineCode",{parentName:"p"},"APP_DIR_NAME")," to it, run the following command:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"> docker run -d -p 32771:32771 -e APP_CONF=/server/app.toml -e APP_DIR_NAME=/server -v /home/joe/oes:/server openfmb.hmi\n")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"A few things to note:")),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"The OpenFMB HMI docker container exposes port ",Object(a.b)("inlineCode",{parentName:"li"},"32771"),".  In this example, the ",Object(a.b)("inlineCode",{parentName:"li"},"docker run")," command above maps host port 32771 to container port 32771 (flag ",Object(a.b)("inlineCode",{parentName:"li"},"-p 32771:32771"),").  You can map any available port on your host system to the exposed port 32771.  For example, if you want to map port ",Object(a.b)("inlineCode",{parentName:"li"},"80")," on your host system to ",Object(a.b)("inlineCode",{parentName:"li"},"32771"),", replace ",Object(a.b)("inlineCode",{parentName:"li"},"-p 32771:32771")," with  ",Object(a.b)("inlineCode",{parentName:"li"},"p 80:32771"),", and command shall be:")),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-bash"},"> docker run -d -p 80:32771 -e APP_CONF=/server/app.toml -e APP_DIR_NAME=/server -v /home/joe/oes:/server openfmb.hmi\n")),Object(a.b)("ol",{start:2},Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"The ",Object(a.b)("inlineCode",{parentName:"p"},"-v")," or ",Object(a.b)("inlineCode",{parentName:"p"},"volumn")," option specifies where the local directory is mounted.")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"The first ",Object(a.b)("inlineCode",{parentName:"p"},"-e")," flag is the ",Object(a.b)("inlineCode",{parentName:"p"},"APP_CONF")," environment variable in the form of ",Object(a.b)("inlineCode",{parentName:"p"},"APP_CONF=/name_of_mounted_volumn/path/to/the/config_file")," (in our case, it is ",Object(a.b)("inlineCode",{parentName:"p"},"APP_CONF=/server/app.toml"),").")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"The second ",Object(a.b)("inlineCode",{parentName:"p"},"-e")," flag is the ",Object(a.b)("inlineCode",{parentName:"p"},"APP_DIR_NAME")," environment variable in the form of ",Object(a.b)("inlineCode",{parentName:"p"},"APP_DIR_NAME=/name_of_mounted_volumn")," (in our case, it is ",Object(a.b)("inlineCode",{parentName:"p"},"APP_DIR_NAME=/server"),")."))),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'TIP: Our named volumn is `/server`, therefore, "name_of_mounted_volumn" is replaced with "server".  \n     You can name it anything you want.\n')),Object(a.b)("ol",{start:5},Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"Launch your favorite browser, and navigate to ",Object(a.b)("inlineCode",{parentName:"p"},"http://127.0.0.1:32771"),".")),Object(a.b)("li",{parentName:"ol"},Object(a.b)("p",{parentName:"li"},"The default username/pwd is ",Object(a.b)("inlineCode",{parentName:"p"},"admin/hm1admin"),"."))),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Congratulations!")," You now have run your first OpenFMB HMI application."))}b.isMDXComponent=!0},133:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return d}));var r=t(0),o=t.n(r);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=o.a.createContext({}),b=function(e){var n=o.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},m=function(e){var n=b(e.components);return o.a.createElement(l.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return o.a.createElement(o.a.Fragment,{},n)}},u=o.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=b(t),u=r,d=m["".concat(i,".").concat(u)]||m[u]||s[u]||a;return t?o.a.createElement(d,p(p({ref:n},l),{},{components:t})):o.a.createElement(d,p({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=u;var p={};for(var c in n)hasOwnProperty.call(n,c)&&(p[c]=n[c]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var l=2;l<a;l++)i[l]=t[l];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);