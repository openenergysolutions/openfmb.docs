"use strict";(self.webpackChunkopenfmb_docs=self.webpackChunkopenfmb_docs||[]).push([[8380],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=u(n),d=a,m=c["".concat(p,".").concat(d)]||c[d]||g[d]||i;return n?r.createElement(m,l(l({ref:t},s),{},{components:n})):r.createElement(m,l({ref:t},s))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},6869:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return s},default:function(){return c}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),l=["components"],o={},p="Log Plugin",u={unversionedId:"adapter/other-plugins/log",id:"adapter/other-plugins/log",title:"Log Plugin",description:"The log plugin enables the user to monitor the messages that are sent to the",source:"@site/docs/adapter/other-plugins/log.md",sourceDirName:"adapter/other-plugins",slug:"/adapter/other-plugins/log",permalink:"/docs/adapter/other-plugins/log",editUrl:"https://github.com/openenergysolutions/openfmb.docs/edit/develop/website/docs/adapter/other-plugins/log.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Capture and Replay Plugins",permalink:"/docs/adapter/other-plugins/capture-replay"},next:{title:"Scheduling",permalink:"/docs/adapter/misc/scheduling"}},s=[{value:"Configuration",id:"configuration",children:[],level:2}],g={toc:s};function c(e){var t=e.components,n=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"log-plugin"},"Log Plugin"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"log")," plugin enables the user to monitor the messages that are sent to the\ninternal bus by printing them to the console or to a file. It can be useful for\ndebugging purposes."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log_debug_string"),": when set to ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", all messages will be printed using\nProtobuf\n",(0,i.kt)("a",{parentName:"li",href:"https://developers.google.com/protocol-buffers/docs/reference/cpp/google.protobuf.message#Message.DebugString"},(0,i.kt)("inlineCode",{parentName:"a"},"DebugString")),"\nmethod."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"filters"),": a list of profiles to print",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"profile"),": name of the profile to monitor"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": conducting equipment identifier"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"path"),": path of the file to which values will be appended"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"print_alias"),": if ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", the alias of the values will be printed to the file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"log_all_values"),": if ",(0,i.kt)("inlineCode",{parentName:"li"},"true"),", all the value of this conducting equipment will\nbe printed to ",(0,i.kt)("inlineCode",{parentName:"li"},"stdout"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"values"),": list of values to extract from the profile",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tag"),': path of the value in the profile. e.g. "meterReading.readingMMXU.W.net.cVal.mag.f.value"'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"alias"),": alias that will optionally be printed with the value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"digits"),": number of digits to keep")))))),(0,i.kt)("p",null,"Here's an example of a configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'log:\n  enabled: true\n  log_debug_string: true  # log the entire protobuf debug string for every profile\n  filters:\n    - profile: MeterReadingProfile\n      name: "test"  # conducting equipment name\n      path: values.txt  # file to which values will be appended\n      print_alias: true\n      log_all_values: false\n      values:\n        - tag: meterReading.readingMMXU.W.net.cVal.mag.f.value\n          alias: W\n          digits: 0\n        - tag: meterReading.readingMMXU.PPV.phsAB.cVal.mag.f.value\n          alias: Vab\n          digits: 1\n        - tag: meterReading.readingMMXU.PPV.phsBC.cVal.mag.f.value\n          alias: Vbc\n          digits: 1\n        - tag: meterReading.readingMMXU.PPV.phsCA.cVal.mag.f.value\n          alias: Vca\n          digits: 1\n        - tag: meterReading.readingMMXU.Hz.mag.f.value\n          alias: Hz\n          digits: 3\n')))}c.isMDXComponent=!0}}]);