"use strict";(self.webpackChunkopenfmb_docs=self.webpackChunkopenfmb_docs||[]).push([[1682],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,f=c["".concat(o,".").concat(m)]||c[m]||d[m]||i;return n?r.createElement(f,l(l({ref:t},u),{},{components:n})):r.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:a,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8415:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:2},l="MQTT",s={unversionedId:"adapter/native-plugins/mqtt",id:"adapter/native-plugins/mqtt",title:"MQTT",description:"MQTT is a lightweight M2M pub/sub messaging protocol mainly",source:"@site/docs/adapter/native-plugins/mqtt.md",sourceDirName:"adapter/native-plugins",slug:"/adapter/native-plugins/mqtt",permalink:"/docs/adapter/native-plugins/mqtt",draft:!1,editUrl:"https://github.com/openenergysolutions/openfmb.docs/edit/develop/website/docs/adapter/native-plugins/mqtt.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"NATS",permalink:"/docs/adapter/native-plugins/nats"},next:{title:"DDS",permalink:"/docs/adapter/native-plugins/dds"}},o={},p=[{value:"Configuration",id:"configuration",level:2},{value:"Security",id:"security",level:2},{value:"Server Authentication + Username/Password",id:"server-authentication--usernamepassword",level:3},{value:"Mutual Authentication",id:"mutual-authentication",level:3}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"mqtt"},"MQTT"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"http://mqtt.org/"},"MQTT")," is a lightweight M2M pub/sub messaging protocol mainly\nused for IoT communication."),(0,a.kt)("p",null,"The protocol uses a topic structure delimited by forward slashes ",(0,a.kt)("inlineCode",{parentName:"p"},"/"),". OpenFMB\ntopics names conform to the following pattern:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"openfmb/<module name>/<profile name>/<subject name>\n")),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'mqtt:\n  enabled: false\n  max-queued-messages: 100  # how many messages to buffer before discarding the oldest\n  server-address: tcp://localhost:1883\n  client-id: client1\n  connect-retry-delay-ms: 5000\n  security:\n    security-type: none\n  publish:  # to the MQTT broker\n    - profile: SwitchReadingProfile\n      topic-suffix: "*"  # * or an mRID\n    - profile: SwitchStatusProfile\n      topic-suffix: "*"  # * or an mRID\n  subscribe:  # from the MQTT broker\n    - profile: SwitchControlProfile\n      topic-suffix: "*"  # * or an mRID\n')),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"enabled"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"true")," to enable MQTT plugin, ",(0,a.kt)("inlineCode",{parentName:"td"},"false")," to disable.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"max-queued-messages"),(0,a.kt)("td",{parentName:"tr",align:null},"Number of messages to keep in the publishing queue before discarding the oldest.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"server-address"),(0,a.kt)("td",{parentName:"tr",align:null},"Connection address of the MQTT server. The protocol can be ",(0,a.kt)("inlineCode",{parentName:"td"},"tcp")," or ",(0,a.kt)("inlineCode",{parentName:"td"},"ssl"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"client-id"),(0,a.kt)("td",{parentName:"tr",align:null},"Client ID, which must be ",(0,a.kt)("strong",{parentName:"td"},"unique")," per client and broker.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"connect-retry-delay-ms"),(0,a.kt)("td",{parentName:"tr",align:null},"Number of milliseconds to wait before trying to re-establish a connection to the server.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"security"),(0,a.kt)("td",{parentName:"tr",align:null},"See ",(0,a.kt)("a",{parentName:"td",href:"#security"},"Security"),".")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"publish"),(0,a.kt)("td",{parentName:"tr",align:null},"List of profiles to publish to MQTT network (from the internal bus to MQTT)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"subscribe"),(0,a.kt)("td",{parentName:"tr",align:null},"List of profiles to subscribe from the MQTT network (from MQTT to the internal bus)")))),(0,a.kt)("p",null,"For the ",(0,a.kt)("inlineCode",{parentName:"p"},"publish")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"subscribe")," parameters, a list of profiles is specified.\nProvide both the profile name (",(0,a.kt)("inlineCode",{parentName:"p"},"profile"),") and which equipment you\nwant to publish/subscribe to (",(0,a.kt)("inlineCode",{parentName:"p"},"subject"),"). The subject name can either be ",(0,a.kt)("inlineCode",{parentName:"p"},"*")," to\npublish/subscribe to all the profiles, or a specific conducting equipment mRID."),(0,a.kt)("h2",{id:"security"},"Security"),(0,a.kt)("p",null,"The content of the ",(0,a.kt)("inlineCode",{parentName:"p"},"security")," section depends on the ",(0,a.kt)("inlineCode",{parentName:"p"},"security-type")," value."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'tab="none"',tab:'"none"'},"security:\n  security-type: none\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'tab="tls_server_auth"',tab:'"tls_server_auth"'},'security:\n  security-type: tls_server_auth\n  ca-trusted-cert-file: server_cert.pem\n  username: "username"\n  password: "password"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'tab="tls_mutual_auth"',tab:'"tls_mutual_auth"'},"security:\n  security-type: tls_mutual_auth\n  ca-trusted-cert-file: server_cert.pem\n  client-private-key-file: client_key.pem\n  client-cert-chain-file: client_cert.pem\n")),(0,a.kt)("p",null,"If no security is needed, the ",(0,a.kt)("inlineCode",{parentName:"p"},"security-type")," can be set to ",(0,a.kt)("inlineCode",{parentName:"p"},"none"),"."),(0,a.kt)("p",null,"To learn how to produce self-signed certificates with OpenSSL, check\n",(0,a.kt)("a",{parentName:"p",href:"/docs/adapter/misc/self-signed"},"Self-signed certificates"),"."),(0,a.kt)("h3",{id:"server-authentication--usernamepassword"},"Server Authentication + Username/Password"),(0,a.kt)("p",null,"The server must run with a TLS certificate, a username and a password. In the\n",(0,a.kt)("inlineCode",{parentName:"p"},"mosquitto.conf"),", add the following lines:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cafile ~/certs/client_cert.pem\ncertfile ~/certs/server_cert.pem\nkeyfile ~/certs/server_key.pem\npassword_file /etc/mosquitto/passwd\nallow_anonymous false\n")),(0,a.kt)("p",null,"And generate the ",(0,a.kt)("inlineCode",{parentName:"p"},"passwd")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"> sudo mosquitto_passwd -c /etc/mosquitto/passwd username\n")),(0,a.kt)("p",null,"Finally, configure the Adapter to establish a TLS encrypted session, accepting\nonly the certificate. The username and the password are embedded in the\nconnection URL."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'mqtt:\n  enabled: true\n  max-queued-messages: 100  # how many messages to buffer before discarding the oldest\n  server-address: ssl://localhost:1883\n  client-id: client1\n  connect-retry-delay-ms: 5000\n  security:\n    security-type: tls_server_auth\n    ca-trusted-cert-file: server_cert.pem\n    username: "username"\n    password: "password"\n  # ...\n')),(0,a.kt)("h3",{id:"mutual-authentication"},"Mutual Authentication"),(0,a.kt)("p",null,"The server must run with a TLS certificate and must validate the client\ncertificate. In the ",(0,a.kt)("inlineCode",{parentName:"p"},"mosquitto.conf"),", add the following lines:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"cafile ~/certs/client_cert.pem\ncertfile ~/certs/server_cert.pem\nkeyfile ~/certs/server_key.pem\nrequire_certificate true\n#password_file /etc/mosquitto/passwd\n#allow_anonymous false\n")),(0,a.kt)("p",null,"If you want to require username/password in addition to mutual authentication,\nde-comment the last two lines."),(0,a.kt)("p",null,"And configure the Adapter to establish a TLS encrypted session with mutual\nauthentication."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'mqtt:\n  enabled: true\n  max-queued-messages: 100  # how many messages to buffer before discarding the oldest\n  server-address: ssl://localhost:1883\n  client-id: client1\n  connect-retry-delay-ms: 5000\n  security:\n    security-type: tls_mutual_auth\n    ca-trusted-cert-file: server_cert.pem\n    client-private-key-file: client_key.pem\n    client-cert-chain-file: client_cert.pem\n    #username: "username"\n    #password: "password"\n  # ...\n')),(0,a.kt)("p",null,"If a username/password is required, then uncomment the last two lines."))}d.isMDXComponent=!0}}]);