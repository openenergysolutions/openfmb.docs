(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{120:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var o=n(0),r=n.n(o);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,b=d["".concat(a,".").concat(m)]||d[m]||u[m]||i;return n?r.a.createElement(b,l(l({ref:t},c),{},{components:n})):r.a.createElement(b,l({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.a.createElement.apply(null,a)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},75:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return a})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var o=n(3),r=n(7),i=(n(0),n(120)),a={sidebar_position:2},l={unversionedId:"adapter/protos",id:"adapter/protos",isDocsHomePage:!1,title:"Protos",description:"The protos used in this adapter are those defined in this repository:",source:"@site/docs/adapter/protos.md",sourceDirName:"adapter",slug:"/adapter/protos",permalink:"/docs/adapter/protos",editUrl:"https://github.com/openenergysolutions/openfmb.docs/edit/develop/website/docs/adapter/protos.md",version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/adapter/index"},next:{title:"CLI",permalink:"/docs/adapter/cli"}},s=[{value:"Adding a new profile",id:"adding-a-new-profile",children:[]},{value:"Profile categories",id:"profile-categories",children:[]}],c={toc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"The protos used in this adapter are those defined in this repository:\n",Object(i.b)("a",{parentName:"p",href:"https://github.com/openenergysolutions/openfmb-schemas"},"openenergysolutions/openfmb-schemas")),Object(i.b)("p",null,"The protos are essential to the adapter and the same version across devices\nshould be used (although protobufs provides some level of\nbackward-compatibility)."),Object(i.b)("p",null,"The standard protos are designed in UML. A custom exporter for Enterprise\nArchitect is used to generate both Google Protobuf definitions and an IDL file.\nSome custom code generation is used to generate C++ code used in this adapter.\nWhen the protos are changed or if you want to use custom protos, changes to the\ncode and recompilation is necessary to build a new adapter."),Object(i.b)("h2",{id:"adding-a-new-profile"},"Adding a new profile"),Object(i.b)("p",null,"To add a new profile, follow this procedure:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"In the code generator, in ",Object(i.b)("inlineCode",{parentName:"li"},"com.oes.openfmb.generation.Profiles"),", add the\nprofile descriptor. You will need to execute a ",Object(i.b)("inlineCode",{parentName:"li"},"mvn verify")," before to\nregenerate the Protobuf. Then, execute the codegenerator. If new repeated\nfields or enum values were added, then exceptions will be thrown. Classify the\nnew repeated types in ",Object(i.b)("inlineCode",{parentName:"li"},"com.oes.openfmb.generation.proto.RepeatedType")," and the\nnew enums in ",Object(i.b)("inlineCode",{parentName:"li"},"com.oes.openfmb.generation.proto.TypeClassification"),"."),Object(i.b)("li",{parentName:"ul"},"Add the module (if necessary) to the ",Object(i.b)("inlineCode",{parentName:"li"},"CMakeLists.txt")," file in ",Object(i.b)("inlineCode",{parentName:"li"},"proto-api"),"."),Object(i.b)("li",{parentName:"ul"},"Add the additional generated files in the ",Object(i.b)("inlineCode",{parentName:"li"},"CMakeLists.txt")," file in\n",Object(i.b)("inlineCode",{parentName:"li"},"adapter-util"),"."),Object(i.b)("li",{parentName:"ul"},"Add the profile in ",Object(i.b)("inlineCode",{parentName:"li"},"adapter-api/include/adapter-api/ProfileRegistry.h")),Object(i.b)("li",{parentName:"ul"},"In ",Object(i.b)("inlineCode",{parentName:"li"},"adapter-util/include/adapter-util/ProfileInfo.h"),", add a template\nspecialization for the profile:")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"template <>\nstruct profile_info<breakermodule::BreakerReadingProfile> {\n\n    static constexpr ProfileType type = ProfileType::Reading;\n\n    static const commonmodule::MessageInfo& get_message_info(const breakermodule::BreakerReadingProfile& profile)\n    {\n        return profile.readingmessageinfo().messageinfo();\n    }\n\n    static const commonmodule::ConductingEquipment& get_conducting_equip(const breakermodule::BreakerReadingProfile& profile)\n    {\n        return profile.breaker().conductingequipment();\n    }\n};\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"For control profiles, in\n",Object(i.b)("inlineCode",{parentName:"li"},"adapter-util/include/adapter-util/schedule/ScheduleExtractors.h"),", add a\ntemplate specialization for the profile. Note that ",Object(i.b)("inlineCode",{parentName:"li"},"get_control_fscc")," is\nnecessary only when a ",Object(i.b)("inlineCode",{parentName:"li"},"commonmodule::ControlFSCC")," is present in the profile.\nAlso note that ",Object(i.b)("inlineCode",{parentName:"li"},"custom_point_t"),", ",Object(i.b)("inlineCode",{parentName:"li"},"has_custom_points")," and ",Object(i.b)("inlineCode",{parentName:"li"},"get_custom_points"),"\nare only necessary if custom schedule points are present in the profile.")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-cpp"},"template <>\nstruct schedule_extractor<essmodule::ESSControlProfile>\n{\n    static void set_source_mrid(essmodule::ESSControlProfile& profile, const std::string& mrid)\n    {\n        profile.mutable_ess()->mutable_conductingequipment()->set_mrid(mrid);\n    }\n\n    static void set_message_mrid(essmodule::ESSControlProfile& profile, const std::string& mrid)\n    {\n        profile.mutable_controlmessageinfo()->mutable_messageinfo()->mutable_identifiedobject()->mutable_mrid()->set_value(mrid);\n    }\n\n    static commonmodule::Timestamp* get_message_timestamp(essmodule::ESSControlProfile& profile)\n    {\n        return profile.mutable_controlmessageinfo()->mutable_messageinfo()->mutable_messagetimestamp();\n    }\n\n    static commonmodule::ControlFSCC* get_control_fscc(essmodule::ESSControlProfile& profile)\n    {\n        return profile.mutable_esscontrol()->mutable_esscontrolfscc()->mutable_controlfscc();\n    }\n\n    using custom_point_t = essmodule::ESSPoint;\n\n    static bool has_custom_points(const essmodule::ESSControlProfile& profile)\n    {\n        return profile.esscontrol().esscontrolfscc().esscontrolschedulefsch().has_valdcsg();\n    }\n\n    static google::protobuf::RepeatedPtrField<custom_point_t>* get_custom_points(essmodule::ESSControlProfile& profile)\n    {\n        return profile.mutable_esscontrol()->mutable_esscontrolfscc()->mutable_esscontrolschedulefsch()->mutable_valdcsg()->mutable_crvpts();\n    }\n};\n")),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Try compiling the adapter with all the plugins, and make sure it succeeds.\nAlso execute the unit tests with ",Object(i.b)("inlineCode",{parentName:"li"},"ctest ."),". If something fails, then find the\nissue yourself or ask \xc9mile for help (that's me btw, so prefer finding it by\nyourself)."),Object(i.b)("li",{parentName:"ul"},"In the test harness, in ",Object(i.b)("inlineCode",{parentName:"li"},"io.github.openfmb.harness.MessageFactory"),", add the\nprofile with a method to access the mRID.")),Object(i.b)("h2",{id:"profile-categories"},"Profile categories"),Object(i.b)("p",null,"There are four profile types recognized by the adapter:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Reading profiles: are used for rapidly gathered values"),Object(i.b)("li",{parentName:"ul"},"Status profiles: are used for rapidly gathered values"),Object(i.b)("li",{parentName:"ul"},"Event profiles: report only the changes since the most recent status"),Object(i.b)("li",{parentName:"ul"},"Control/Discrete Control profiles: control a device. This includes executing\nschedules as described in the ",Object(i.b)("a",{parentName:"li",href:"/docs/adapter/misc/scheduling"},"scheduling section"))))}p.isMDXComponent=!0}}]);