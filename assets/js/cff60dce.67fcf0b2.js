"use strict";(self.webpackChunkopenfmb_docs=self.webpackChunkopenfmb_docs||[]).push([[3883],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),u=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),s=u(n),c=l,N=s["".concat(p,".").concat(c)]||s[c]||m[c]||i;return n?a.createElement(N,r(r({ref:t},d),{},{components:n})):a.createElement(N,r({ref:t},d))}));function c(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var u=2;u<i;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},8574:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return d},default:function(){return s}});var a=n(7462),l=n(3366),i=(n(7294),n(3905)),r=["components"],o={},p="DNP3 Outstation",u={unversionedId:"adapter/protocol-plugins/dnp3/outstation",id:"adapter/protocol-plugins/dnp3/outstation",title:"DNP3 Outstation",description:"The dnp3-outstation plugin exposes OpenFMB measurements as a DNP3 outstation",source:"@site/docs/adapter/protocol-plugins/dnp3/outstation.md",sourceDirName:"adapter/protocol-plugins/dnp3",slug:"/adapter/protocol-plugins/dnp3/outstation",permalink:"/docs/adapter/protocol-plugins/dnp3/outstation",editUrl:"https://github.com/openenergysolutions/openfmb.docs/edit/develop/website/docs/adapter/protocol-plugins/dnp3/outstation.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DNP3 Master",permalink:"/docs/adapter/protocol-plugins/dnp3/master"},next:{title:"Capture and Replay Plugins",permalink:"/docs/adapter/other-plugins/capture-replay"}},d=[{value:"General Configuration",id:"general-configuration",children:[],level:2},{value:"Non-control Profiles",id:"non-control-profiles",children:[{value:"Boolean",id:"boolean",children:[],level:3},{value:"Int32 and Int64",id:"int32-and-int64",children:[],level:3},{value:"Float",id:"float",children:[],level:3},{value:"Enum",id:"enum",children:[],level:3}],level:2},{value:"Control Profiles",id:"control-profiles",children:[{value:"Boolean",id:"boolean-1",children:[],level:3},{value:"Int32, Int64, and Float",id:"int32-int64-and-float",children:[],level:3},{value:"Enum",id:"enum-1",children:[],level:3},{value:"Schedule Parameters",id:"schedule-parameters",children:[],level:3}],level:2}],m={toc:d};function s(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dnp3-outstation"},"DNP3 Outstation"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"dnp3-outstation")," plugin exposes OpenFMB measurements as a DNP3 outstation\nfor non-control OpenFMB profiles. It also maps DNP3 commands to OpenFMB control\nmessages."),(0,i.kt)("h2",{id:"general-configuration"},"General Configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name"),": Name used in the logs to identify the communication session."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"channel"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"listen-adapter"),": Network adapter to use to establish a TCP connection (typically 0.0.0.0)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"port"),": TCP port on which the outstation will be listening"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"protocol"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"master-address"),": DNP3 link-layer address of the master (the remote device)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"outstation-address"),": DNP3 link-layer address of the outstation (the\nadapter)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"enable-unsolicited"),": support for DNP3 unsolicited responses"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"confirm-timeout-ms"),": DNP3 confirmation timeout (in milliseconds)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default-static-variations"),": default static variations",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"binary-input"),": possible values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group1Var1")," (packed)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group1Var2")," (with flags)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"analog-input"),": possible values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group30Var1")," (32-bit with flags)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group30Var2")," (16-bit with flags)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group30Var3")," (32-bit without flags)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group30Var4")," (16-bit without flags)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group30Var5")," (32-bit float with flags)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group30Var6")," (64-bit double with flags)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"counter"),": possible values:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group20Var1")," (32-bit with flags)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group20Var2")," (16-bit with flags)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group20Var5")," (32-bit without flags)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group20Var6")," (16-bit without flags)"))))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"default-event-variations"),": default event variations",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"binary-input"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group2Var1")," (without time)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group2Var2")," (with absolute time)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group2Var3")," (with relative time)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"analog-input"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group32Var1")," (32-bit without time)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group32Var2")," (16-bit without time)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group32Var3")," (32-bit with time)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group32Var4")," (16-bit with time)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group32Var5")," (32-bit float without time)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group32Var6")," (64-bit double without time)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group32Var7")," (32-bit float with time)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group32Var8")," (64-bit double with time)"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"counter"),":",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group22Var1")," (32-bit with flags)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group22Var2")," (16-bit with flags)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group22Var5")," (32-bit with flags and time)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Group22Var6")," (16-bit with flags and time)")))))))),(0,i.kt)("h2",{id:"non-control-profiles"},"Non-control Profiles"),(0,i.kt)("p",null,"Non-control profiles (reading, status, etc) are mapped to DNP3 measurement\npoints. When the message is received on the internal message bus, it updates the\ninternal DNP3 database and masters polling the outstation will read the updated\npoints."),(0,i.kt)("h3",{id:"boolean"},"Boolean"),(0,i.kt)("p",null,"OpenFMB Boolean values can be mapped to DNP3 binary inputs. If ",(0,i.kt)("inlineCode",{parentName:"p"},"negate")," is set\nto ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the OpenFMB value is negated before updating the DNP3 outstation."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"bool-field-type: mapped\ndestination-type: binary  # {none, binary}\nindex: 10\nnegate: false\n")),(0,i.kt)("h3",{id:"int32-and-int64"},"Int32 and Int64"),(0,i.kt)("p",null,"OpenFMB ",(0,i.kt)("inlineCode",{parentName:"p"},"int32")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"int64")," values can be mapped to a DNP3 analog input or a\nDNP3 counter. A scaling value can also be specified."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'tab="analog"',tab:'"analog"'},"int32-field-type: mapped\ndestination-type: analog  # {none, analog, counter}\nindex: 10\nscale: 1000\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'tab="counter"',tab:'"counter"'},"int32-field-type: mapped\ndestination-type: counter  # {none, analog, counter}\nindex: 10\nscale: 1000\n")),(0,i.kt)("h3",{id:"float"},"Float"),(0,i.kt)("p",null,"OpenFMB ",(0,i.kt)("inlineCode",{parentName:"p"},"float")," values can be mapped to a DNP3 analog input. A scaling can be\napplied to the value."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"float-field-type: mapped\ndestination-type: analog  # {none, analog}\nindex: 10\nscale: 1000\n")),(0,i.kt)("h3",{id:"enum"},"Enum"),(0,i.kt)("p",null,"OpenFMB enumerations can be mapped to DNP3 binary or analog points."),(0,i.kt)("p",null,"A list of each enum variant is specified with the desired boolean or integer\nvalue."),(0,i.kt)("p",null,"If the received OpenFMB enumeration variant is not mapped to any value, the\npoint is reported as offline to indicate a misconfiguration."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'tab="binary"',tab:'"binary"'},"enum-field-type: mapped\ndestination-type: binary  # {none, binary, analog}\nindex: 10\nmapping:\n  - DynamicTestKind_none: false\n  - DynamicTestKind_testing: true\n  - DynamicTestKind_operating: false\n  - DynamicTestKind_failed: true\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'tab="analog"',tab:'"analog"'},"enum-field-type: mapped\ndestination-type: analog  # {none, binary, analog}\nindex: 10\nmapping:\n  - DynamicTestKind_none: 0\n  - DynamicTestKind_testing: 1\n  - DynamicTestKind_operating: 2\n  - DynamicTestKind_failed: 3\n")),(0,i.kt)("h2",{id:"control-profiles"},"Control Profiles"),(0,i.kt)("p",null,"DNP3 commands can be translated to OpenFMB control profile messages."),(0,i.kt)("p",null,"There are three actions that can be specified for each point:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"update"),": simply updates the current profile"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"clean_and_update"),": clears the current message and updates the value"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"publish"),": updates the current message and sends it to the message bus")),(0,i.kt)("h3",{id:"boolean-1"},"Boolean"),(0,i.kt)("p",null,"Boolean values in control profiles can be mapped from DNP3 CROBs. A list of\ncontrol codes is specified with the Boolean value it should be associated to."),(0,i.kt)("p",null,"The control codes are the following:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Control Codes"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"NUL"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"NUL_CANCEL"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"PULSE_ON"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"PULSE_ON_CANCEL"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"PULSE_OFF"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"PULSE_OFF_CANCEL"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LATCH_ON"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LATCH_ON_CANCEL"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LATCH_OFF"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"LATCH_OFF_CANCEL"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"CLOSE_PULSE_ON"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"CLOSE_PULSE_ON_CANCEL"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TRIP_PULSE_ON"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"TRIP_PULSE_ON_CANCEL"))))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"bool-field-type: mapped\ncommand-source-type: crob  # {none, crob}\nprofile-action: update  # {update, clear_and_update, update_and_publish}\nindex: 0\nmapping:\n- control_code: LATCH_ON\n    value: true\n- control_code: LATCH_OFF\n    value: false\n")),(0,i.kt)("h3",{id:"int32-int64-and-float"},"Int32, Int64, and Float"),(0,i.kt)("p",null,"Integer and floating point values can be mapped from Analog Output commands, with\noptional scaling."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"float-field-type: mapped\ncommand-source-type: analog_output  # {none, analog_output}\nprofile-action: clear_and_update  # {update, clear_and_update, update_and_publish}\nindex: 10\nscale: 1\n")),(0,i.kt)("h3",{id:"enum-1"},"Enum"),(0,i.kt)("p",null,"DNP3 Analog Output commands can be mapped to OpenFMB enums. A list of\nenumeration variants is provided with the source Analog Output value. If no\nmatch is found at runtime, the outstation will return ",(0,i.kt)("inlineCode",{parentName:"p"},"NOT_SUPPORTED"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"enum-field-type: mapped\ncommand-source-type: analog_output  # {none, analog_output}\nprofile-action: update_and_publish  # {update, clear_and_update, update_and_publish}\nindex: 10\nmapping:\n- name: StateKind_off\n    value: 0\n- name: StateKind_on\n    value: 1\n- name: StateKind_standby\n    value: 2\n")),(0,i.kt)("h3",{id:"schedule-parameters"},"Schedule Parameters"),(0,i.kt)("p",null,"Schedule parameters are not currently supported."))}s.isMDXComponent=!0}}]);