"use strict";(self.webpackChunkopenfmb_docs=self.webpackChunkopenfmb_docs||[]).push([[4917],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=i,g=d["".concat(p,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(g,o(o({ref:n},c),{},{components:t})):a.createElement(g,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},364:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return c},default:function(){return d}});var a=t(7462),i=t(3366),r=(t(7294),t(3905)),o=["components"],l={sidebar_position:4},p="Configuration",s={unversionedId:"adapter/config",id:"adapter/config",title:"Configuration",description:"When the Adapter application is started, the top-level configuration file is read first. (see Running the adapter).",source:"@site/docs/adapter/config.md",sourceDirName:"adapter",slug:"/adapter/config",permalink:"/docs/adapter/config",editUrl:"https://github.com/openenergysolutions/openfmb.docs/edit/develop/website/docs/adapter/config.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Schemas",permalink:"/docs/adapter/schemas"},next:{title:"NATS",permalink:"/docs/adapter/native-plugins/nats"}},c=[{value:"Logging",id:"logging",children:[],level:2},{value:"Plugins",id:"plugins",children:[],level:2},{value:"Templating",id:"templating",children:[],level:2}],u={toc:c};function d(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"When the Adapter application is started, the top-level configuration file is read first. (see ",(0,r.kt)("a",{parentName:"p",href:"./cli#running-the-adapter"},"Running the adapter"),")."),(0,r.kt)("p",null,"The file consists of two main sections: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#logging"},"Logging")," - application-level logging parameters"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#plugins"},"Plugins")," - detailed plugin-specific configuration")),(0,r.kt)("h2",{id:"logging"},"Logging"),(0,r.kt)("p",null,"he logger name is used for messages not related to a particular plugin. It can be useful to distinguish multiple instances of the Adapter running on a machine. "),(0,r.kt)("p",null,"Console logging can be enabled to print everything to ",(0,r.kt)("inlineCode",{parentName:"p"},"stdout"),". "),(0,r.kt)("p",null,"Rotating file logging can be used to preserve most recent logs without filling the disk unnecessarily. When the ",(0,r.kt)("inlineCode",{parentName:"p"},"max-size")," is reached, the file is closed, renamed, and a new file is created to continue logging. Only the last ",(0,r.kt)("inlineCode",{parentName:"p"},"max-files")," are kept. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"logging:\n  logger-name: application\n  console:  # log messages to the console\n    enabled: true\n  rotating-file:  # log messages to rotating files\n    enabled: false\n    path: adapter.log\n    max-size: 1048576  # maximum size of a single file in bytes\n    max-files: 3\n")),(0,r.kt)("h2",{id:"plugins"},"Plugins"),(0,r.kt)("p",null,"In this section, each plugin can be enabled and configured. For details about each plugin configuration parameters, see the appropriate documentation page. "),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"enabled")," Boolean parameter is used to enable/disable a particular plugin. "),(0,r.kt)("p",null,"Non-OpenFMB plugins (e.g., DNP3) will have extra configuration files for each device with which it communicates. When another YAML file is needed, the path parameter points to the file, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"overrides")," list defines parameters overridden by a templating system. "),(0,r.kt)("h2",{id:"templating"},"Templating"),(0,r.kt)("p",null,"It\u2019s common for multiple devices to share the same protocol configuration except for a few fields (e.g., the conducting equipment mRID). A simple templating engine makes it easy to reuse the same configuration file. "),(0,r.kt)("p",null,"In the device\u2019s configuration file, it\u2019s possible to use the special value ",(0,r.kt)("inlineCode",{parentName:"p"},'"?"'),". In the ",(0,r.kt)("inlineCode",{parentName:"p"},"overrides")," parameter of the main configuration file, a path to the ",(0,r.kt)("inlineCode",{parentName:"p"},'"?"')," value is specified for each device with the appropriate value to replace. "),(0,r.kt)("p",null,"Here is an example with a DNP3 configuration. The device configuration contains the following field: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# ...\nprofiles:\n  - name: SolarControlProfile\n    # ...\n    mapping:  # profile model starts here\n      solarInverter:\n        conductingEquipment:\n          mRID:\n            string-field-type: primary_uuid\n            value: "?"\n')),(0,r.kt)("p",null,"In the top-level configuration, we have the following: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# ...\ndnp3-master:\n    enabled: true\n    thread-pool-size: 1  # defaults to std::thread::hardware_concurrency() if <= 0\n    masters:\n        - path: dnp3-master.yml\n          overrides:\n            - key: profiles[0].mapping.solarInverter.conductingEquipment.mRID.value\n              value: 42e2c687-c55c-44a0-a734-9443edb46bfc\n        - path: dnp3-master.yml\n          overrides:\n            - key: profiles[0].mapping.solarInverter.conductingEquipment.mRID.value\n              value: 8ad421eb-b0ad-457b-8813-41ab5e47bc1e\n")),(0,r.kt)("p",null,"This configures communication to two DNP3 devices using a single template. One device has mRID ",(0,r.kt)("inlineCode",{parentName:"p"},"42e2c687-c55c-44a0-a734-9443edb46bfc"),", and the other has mRID ",(0,r.kt)("inlineCode",{parentName:"p"},"8ad421eb-b0ad-457b-8813-41ab5e47bc1e"),". Otherwise, the devices have the exact same mappings and configurations. "),(0,r.kt)("p",null,"For configurations with multiple profiles, indexing is used to specify which profile. For example, if the ",(0,r.kt)("inlineCode",{parentName:"p"},"dnp3-master.yml")," has a second profile that is templated, it can be accessed as follows: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# ...\ndnp3-master:\n  enabled: true\n  thread-pool-size: 1  # defaults to std::thread::hardware_concurrency() if <= 0\n  masters:\n    - path: dnp3-master.yml\n      overrides:\n        # First profile\n        - key: profiles[0].mapping.solarInverter.conductingEquipment.mRID.value\n          value: 42e2c687-c55c-44a0-a734-9443edb46bfc\n        # Second profile\n        - key: profiles[1].mapping.solarInverter.conductingEquipment.mRID.value\n          value: 8ad421eb-b0ad-457b-8813-41ab5e47bc1e\n")))}d.isMDXComponent=!0}}]);